Спринт 1: Python (7 дней, теория + практика ежедневно)

День 1: Типы данных (изменяемые и неизменяемые)

Теория:

   •   Изменяемые типы данных: list, dict, set.
   •   Неизменяемые типы данных: int, float, str, tuple, frozenset.
   •   Особенности работы с памятью (разные объекты для неизменяемых).

Пример задачи для разбора:

a = [1, 2, 3]
b = a
b[0] = 100
print(a) # Что выведется?

Практика:

   1. Определить, какие типы данных изменяемые и неизменяемые:

       x   =   42
       y   =   [1, 2, 3]
       z   =   (1, 2, 3)
       w   =   {'a': 1, 'b': 2}

       (Проверить, что произойдет при изменении их значений).

   2. Написать функцию, которая принимает на вход список и кортеж, а возвращает
      новый список с добавлением элементов кортежа.

Домашнее задание:

   •   Реализовать функцию, которая проверяет, является ли объект неизменяемым.



День 2: Циклы (for, while) и генераторы

Теория:

   •   Циклы for и while, их применение.
   •   Генераторы списков, множеств и словарей ([], {} и {key: value}).
   •   Прерывание циклов (break, continue).

Пример задачи для разбора:

for i in range(5):
    if i == 3:
        break
    print(i)
Практика:

   1. Написать цикл for, который выводит все четные числа из списка.
   2. Создать генератор списка, который возводит числа от 1 до 10 в квадрат.
   3. Реализовать цикл while, который принимает пользовательский ввод, пока не
      введено слово "стоп".

Домашнее задание:

   •   Создать словарь через генератор, где ключи — это числа от 1 до 10, а значения —
       их кубы.



День 3: Условные операторы (if, elif, else)

Теория:

   •   Основы работы с if, elif, else.
   •   Применение any() и all() для проверки условий.

Пример задачи для разбора:

a = [1, 2, 3]
if all(i > 0 for i in a):
    print("Все положительные")
else:
    print("Есть отрицательные")

Практика:

   1. Написать функцию, которая проверяет, входит ли число в заданный диапазон,
      используя if.
   2. Использовать any() для проверки, есть ли в списке числа больше 100.
   3. Написать программу, которая принимает два числа и сравнивает их (равны,
      больше, меньше).

Домашнее задание:

   •   Реализовать функцию, которая проверяет, можно ли составить из элементов списка
       числа, делящиеся на 5.



День 4: ООП и магические методы

Теория:

   •   Что такое классы и объекты.
   •   Магические методы: __init__, __str__, __len__, __add__, __getitem__.
Пример задачи для разбора:

class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

       def __add__(self, other):
           return Point(self.x + other.x, self.y + other.y)

Практика:

   1. Создать класс для описания книги (атрибуты: название, автор). Добавить метод
      __str__, который возвращает строку.
   2. Реализовать класс, который поддерживает сложение двух объектов через метод
      __add__.

Домашнее задание:

   •     Создать класс "Список", который поддерживает обращение по индексу через
         __getitem__.




День 5: Декораторы

Теория:

   •     Что такое декораторы, зачем нужны.
   •     Пример встроенного декоратора @staticmethod.

Пример задачи для разбора:

def decorator(func):
    def wrapper():
        print("Before function call")
        func()
        print("After function call")
    return wrapper

Практика:

   1. Написать декоратор, который измеряет время выполнения функции.
   2. Реализовать декоратор, который проверяет, есть ли у пользователя права для
      выполнения функции.

Домашнее задание:

   •     Написать декоратор, который кэширует результаты выполнения функции.
День 6: Контекстные менеджеры

Теория:

   •   Использование with для работы с файлами.
   •   Создание своих контекстных менеджеров через __enter__ и __exit__.

Пример задачи для разбора:

with open('file.txt', 'r') as file:
    print(file.read())

Практика:

   1. Создать контекстный менеджер для работы с базой данных (заглушка).
   2. Реализовать менеджер, который отслеживает время выполнения блока кода.

Домашнее задание:

   •   Написать контекстный менеджер для временного изменения текущей директории.



День 7: Итоговая практика

Тестовая задача:
Создать приложение с следующими требованиями:

   1. Пользователь вводит список чисел.
   2. Реализовать класс, который:
         o Сортирует числа.
         o Умеет добавлять новые числа (через магические методы).
   3. Использовать декоратор для кэширования результатов сортировки.
   4. Добавить контекстный менеджер для работы с файлом (сохранение результата).

Результат: После завершения первого спринта вы полностью освоите основы Python и
будете готовы перейти к веб-разработке!
Спринт 2: Django и Django REST Framework (7 дней)




День 1: Введение в Django

Теория:

  •   Установка Django, создание проекта.
  •   Структура Django-проекта (модули settings, urls, views).
  •   Простейшая маршрутизация.

Практика:

  1. Установить Django и создать проект.
  2. Реализовать простую страницу с текстом через функцию view.

Домашнее задание:

  •   Добавить вторую страницу в проект с маршрутом /about/.



День 2: Работа с моделями

Теория:

  •   Создание моделей, основные поля (CharField, IntegerField, DateTimeField).
  •   Выполнение миграций.

Практика:

  1. Создать модель для хранения данных о книгах (название, автор, дата публикации).
  2. Выполнить миграции и проверить модель в базе данных.

Домашнее задание:

  •   Добавить поле "описание" к модели книги.
День 3: Django Admin и ORM

Теория:

  •   Подключение модели в админ-панель.
  •   Основы работы с ORM (запросы filter, all, get).

Практика:

  1. Настроить админку для работы с моделью книги.
  2. Выполнить CRUD-операции через ORM.

Домашнее задание:

  •   Написать скрипт, который добавляет 5 книг в базу через ORM.



День 4: Django REST Framework (DRF): Введение

Теория:

  •   Установка DRF, основы APIView.
  •   Создание сериализаторов для работы с данными.

Практика:

  1. Реализовать API для получения списка книг.
  2. Написать сериализатор для модели книги.

Домашнее задание:

  •   Добавить API для создания новых книг.



День 5: Представления и роутеры

Теория:

  •   Использование ModelViewSet.
  •   Автоматическое создание маршрутов через DefaultRouter.

Практика:

  1. Перевести API книги на ModelViewSet.
  2. Настроить роутер для автоматического создания маршрутов.

Домашнее задание:

  •   Добавить маршруты для редактирования и удаления книг.
День 6: Аутентификация в DRF

Теория:

   •   Встроенные механизмы аутентификации (Token, Session).
   •   Настройка доступа через permissions.

Практика:

   1. Добавить токен-аутентификацию для API.
   2. Ограничить доступ к API книг только для авторизованных пользователей.

Домашнее задание:

   •   Реализовать API для регистрации и входа пользователей.



День 7: Итоговая задача по Django и DRF

Тестовая задача:
Создать REST API для управления книгами:

   •   Реализовать CRUD-операции.
   •   Ограничить доступ с помощью токенов.
   •   Добавить возможность фильтрации книг по автору.
Спринт 3: Flask и SQLAlchemy (7 дней)




День 1: Введение в Flask

Теория:

  •   Установка Flask, структура приложения.
  •   Создание базового маршрута.

Практика:

  1. Установить Flask и создать приложение с маршрутом /.
  2. Добавить второй маршрут /hello/<name>.

Домашнее задание:

  •   Настроить сервер для запуска Flask на порту 5001.



День 2: Шаблоны Jinja2

Теория:

  •   Использование шаблонов Jinja2 для отображения данных.
  •   Передача переменных в шаблоны.

Практика:

  1. Создать шаблон для отображения списка книг.
  2. Передать список книг в шаблон через маршрут.

Домашнее задание:

  •   Добавить шаблон для отображения одной книги.



День 3: SQLAlchemy

Теория:

  •   Установка SQLAlchemy.
  •   Подключение базы данных и создание моделей.
Практика:

  1. Подключить SQLite в приложении Flask.
  2. Создать модель для хранения данных о книгах.

Домашнее задание:

  •   Добавить функцию для добавления данных в базу через SQLAlchemy.



День 4: REST API на Flask

Теория:

  •   Создание REST API с использованием Flask.
  •   Обработка POST и GET запросов.

Практика:

  1. Реализовать API для получения списка книг.
  2. Реализовать API для добавления новой книги.

Домашнее задание:

  •   Добавить возможность удаления книги через API.



День 5: Работа с формами

Теория:

  •   Использование Flask-WTF для работы с формами.
  •   Валидация данных.

Практика:

  1. Создать форму для добавления книги.
  2. Добавить обработку формы на сервере.

Домашнее задание:

  •   Добавить валидацию формы с проверкой длины названия книги.
День 6: Авторизация в Flask

Теория:

   •   Использование Flask-Login для авторизации.
   •   Настройка маршрутов для регистрации и входа.

Практика:

   1. Добавить регистрацию пользователя.
   2. Реализовать авторизацию через логин и пароль.

Домашнее задание:

   •   Ограничить доступ к добавлению книг только для авторизованных пользователей.



День 7: Итоговая задача по Flask

Тестовая задача:
Создать приложение для управления библиотекой:

   •   Реализовать REST API для CRUD-операций.
   •   Добавить веб-интерфейс для работы с библиотекой.
   •   Настроить авторизацию.
Спринт 4: FastAPI и асинхронное программирование (7 дней)



День 1–3: Введение в FastAPI

   •   Основы FastAPI, автоматическая генерация документации.
   •   Асинхронность в FastAPI: async и await.
   •   Работа с запросами и параметрами.

Практика:

   1. Создать REST API для работы с книгами.
   2. Настроить фильтрацию и сортировку данных через параметры запросов.

День 4–5: Валидация и авторизация

   •   Работа с Pydantic для валидации данных.
   •   Реализация авторизации через JWT.

Практика:

   1. Добавить модель для авторизации пользователей.
   2. Настроить токенизацию через JWT.



Тестовые задачи:
Каждый спринт завершается созданием полноценного мини-проекта (например,
библиотека, API для задач).
Спринт 5: SQL (7 дней)




День 1: Введение в SQL

Теория:

  •   Основы SQL: что такое реляционные базы данных.
  •   Основные команды: SELECT, FROM, WHERE.

Практика:

  1. Создать таблицу users (поля: id, name, email).
  2. Написать запросы для выборки всех пользователей и пользователей с
     определенным именем.

Домашнее задание:

  •   Создать таблицу books и выбрать книги с определенным автором.



День 2: Сортировка и фильтрация данных

Теория:

  •   Использование ORDER BY, GROUP BY.
  •   Агрегатные функции: COUNT, SUM, AVG, MAX, MIN.

Практика:

  1. Подсчитать количество пользователей в таблице users.
  2. Найти максимальную цену в таблице books.

Домашнее задание:

  •   Написать запрос для подсчета книг по авторам.



День 3: Связи таблиц

Теория:

  •   Типы связей: 1t1, 1tM, MtM.
  •   Команда JOIN для объединения данных из таблиц.
Практика:

   1. Создать таблицы authors и books.
   2. Написать запрос для выбора всех книг и их авторов.

Домашнее задание:

   •   Реализовать связь 1tM между таблицами users и orders.



День 4–6: Практика сложных запросов

Теория:

   •   Подзапросы и вложенные запросы.
   •   Использование индексов для оптимизации.

Практика:

   1. Написать запрос для поиска пользователей, у которых есть заказы.
   2. Реализовать вложенный запрос для подсчета книг с определенным автором.

Домашнее задание:

   •   Написать SQL-запрос для обновления данных на основе подзапроса.



День 7: Тестовая задача

Создать базу данных для управления библиотекой с таблицами:

   •   users (пользователи).
   •   books (книги).
   •   loans (выдача книг).
       Написать запросы для CRUD-операций и подсчета популярных книг.
Спринт 6: Telegram Bot (7 дней)



День 1: Введение в Telegram Bot API

Теория:

  •   Что такое Telegram Bot API.
  •   Регистрация бота через BotFather.

Практика:

  1. Создать нового бота через BotFather.
  2. Настроить получение сообщений от пользователя.

Домашнее задание:

  •   Реализовать бота, который отвечает "Привет" на любое сообщение.



День 2: Обработка команд

Теория:

  •   Работа с командами /start, /help.
  •   Использование библиотеки python-telegram-bot.

Практика:

  1. Реализовать команду /start, которая отправляет приветственное сообщение.
  2. Добавить обработку команды /help.

Домашнее задание:

  •   Реализовать команду /about, которая выводит информацию о боте.



День 3: Хранение данных

Теория:

  •   Подключение бота к базе данных (например, SQLite).
  •   Сохранение и извлечение данных.
Практика:

  1. Сохранить в базу сообщения пользователя.
  2. Реализовать команду /history, которая выводит последние 5 сообщений.

Домашнее задание:

  •   Реализовать команду для очистки истории сообщений.



День 4–5: Расширение функционала

Теория:

  •   Работа с кнопками и клавиатурой.
  •   Отправка изображений и файлов.

Практика:

  1. Добавить кнопки для отправки случайной шутки или факта.
  2. Реализовать отправку изображения по команде.

Домашнее задание:

  •   Добавить функционал, где пользователь вводит дату, а бот отправляет расписание
      дня.



День 6: Интеграция с внешними API

Теория:

  •   Получение данных из внешних API (например, OpenWeatherMap).

Практика:

  1. Реализовать команду /weather, которая показывает погоду в городе.

Домашнее задание:

  •   Добавить команду /news, которая выводит последние новости через API.
День 7: Тестовая задача

Создать Telegram-бота для управления личным бюджетом:

   •   Добавление доходов и расходов.
   •   Подсчет баланса.
   •   Отображение истории операций.
Спринт 7: Linux и bash (7 дней)



День 1–2: Основы Linux

Теория:

   •   Основные команды Linux (ls, cd, cat, touch, mkdir, rm).
   •   Работа с правами доступа (chmod, chown).

Практика:

   1. Создать директорию и файл, изменить их права.
   2. Написать скрипт для копирования файлов в новую папку.

Домашнее задание:

   •   Реализовать скрипт для архивирования указанной директории.



День 3–5: Скрипты на bash

Теория:

   •   Написание скриптов на bash.
   •   Использование переменных, циклов и условий.

Практика:

   1. Написать скрипт для резервного копирования файлов.
   2. Создать скрипт для мониторинга дискового пространства.

Домашнее задание:

   •   Написать скрипт для автоматического обновления пакетов системы.



День 6–7: Тестовая задача

Создать bash-скрипт для развёртывания Django-проекта:

   •   Настройка виртуального окружения.
   •   Установка зависимостей.
   •   Запуск проекта на сервере.
Спринт 8: API и основы ИИ (7 дней)



День 1–3: Работа с API

Теория:

   •   Что такое API, запросы GET, POST, PUT, DELETE.
   •   Работа с библиотекой requests.

Практика:

   1. Отправить запрос к API и получить список данных.
   2. Создать свой API с использованием Flask или FastAPI.

Домашнее задание:

   •   Добавить эндпоинт для обработки данных на стороне сервера.



День 4–5: Основы ИИ

Теория:

   •   Что такое искусственный интеллект и машинное обучение.
   •   Основы использования библиотек numpy, pandas, scikit-learn.

Практика:

   1. Реализовать простую линейную регрессию для предсказания.
   2. Построить график зависимости данных.

Домашнее задание:

   •   Использовать API OpenAI для генерации текста.



День 6–7: Тестовая задача

Создать сервис:

   •   Вход: данные о клиентах.
   •   Выход: предсказание (например, вероятность покупки).
   •   Реализовать API для отправки данных и получения результата.
Спринт 9: Асинхронное программирование (7 дней)



День 1: Основы асинхронности в Python

Теория:

  •   Асинхронность: что такое async/await.
  •   Собы петля (event loop).
  •   Модули asyncio и time.

Пример задачи:

  •   Задержка в выполнении программы с использованием asyncio.sleep.

Практика:

  1. Написать асинхронную функцию, которая выводит сообщения с задержкой в 2
     секунды.
  2. Реализовать параллельное выполнение двух задач с помощью asyncio.

Домашнее задание:

  •   Реализовать функцию, которая запрашивает API дважды асинхронно и возвращает
      результаты.



День 2: Асинхронные генераторы и итераторы

Теория:

  •   Различие между синхронными и асинхронными генераторами.
  •   Методы __aiter__ и __anext__.

Пример задачи:

  •   Создать асинхронный генератор для вывода чисел от 1 до 5 с задержкой.

Практика:

  1. Реализовать асинхронный итератор для обработки данных из списка.
  2. Использовать асинхронный генератор для чтения данных из файла построчно.

Домашнее задание:

  •   Создать асинхронный генератор, который считывает API данные по страницам.
День 3: Работа с асинхронными библиотеками

Теория:

  •   Библиотека aiohttp для выполнения HTTP-запросов.

Пример задачи:

  •   Запрашивать данные с открытого API асинхронно с использованием aiohttp.

Практика:

  1. Написать скрипт, который отправляет асинхронные запросы к 3 разным API.
  2. Реализовать параллельную загрузку изображений.

Домашнее задание:

  •   Реализовать асинхронное скачивание нескольких файлов и их сохранение.



День 4: Понимание GIL (Global Interpreter Lock)

Теория:

  •   Что такое GIL, как он ограничивает многопоточность.
  •   Различие между многопоточностью и многозадачностью.

Пример задачи:

  •   Создать простой пример работы с потоками через модуль threading.

Практика:

  1. Написать программу, которая выполняет многопоточные задачи и анализирует их
     выполнение.
  2. Сравнить время выполнения синхронного и многопоточного кода.

Домашнее задание:

  •   Найти пример кода, где GIL влияет на производительность, и оптимизировать его.



День 5: Celery для асинхронных задач

Теория:

  •   Установка и настройка Celery.
  •   Связь с брокером сообщений (например, Redis).
Пример задачи:

   •   Написать задачу Celery, которая выполняет вычисления в фоновом режиме.

Практика:

   1. Настроить Celery для выполнения асинхронной отправки email.
   2. Реализовать задачу, которая сохраняет данные в базу после обработки.

Домашнее задание:

   •   Реализовать планировщик задач, который отправляет отчеты ежедневно.



День 6–7: Тестовая задача

Создать асинхронный сервис:

   •   Вход: массив данных (например, URL).
   •   Сервис: скачивание и обработка данных асинхронно.
   •   Выход: результат в виде JSON.
Спринт 10: FastAPI и API интеграции (7 дней)



День 1: Введение в FastAPI

Теория:

  •   Основы работы FastAPI.
  •   Автоматическое создание документации (Swagger).

Практика:

  1. Установить FastAPI и создать первый маршрут /.
  2. Реализовать маршрут, который принимает параметры через URL.

Домашнее задание:

  •   Добавить маршрут /hello/<name>, который возвращает "Привет, <имя>".



День 2: Pydantic и валидация данных

Теория:

  •   Основы Pydantic: модели для валидации входных данных.
  •   Валидация запросов и ответов.

Практика:

  1. Создать модель для валидации данных пользователя ( name, age).
  2. Настроить API, которое проверяет входные данные перед обработкой.

Домашнее задание:

  •   Добавить маршрут, который валидирует массив чисел и возвращает их сумму.



День 3: Работа с базой данных

Теория:

  •   Подключение FastAPI к базе данных через SQLAlchemy.
Практика:

   1. Настроить базу данных SQLite и подключить её к FastAPI.
   2. Создать таблицу пользователей и добавить API для создания пользователя.

Домашнее задание:

   •   Реализовать API для получения списка всех пользователей.



День 4–5: Интеграция с внешними API

Теория:

   •   Работа с внешними API через httpx.

Практика:

   1. Реализовать маршрут, который запрашивает данные погоды из OpenWeather API.
   2. Настроить API для получения случайных шуток из внешнего сервиса.

Домашнее задание:

   •   Добавить кэширование ответов внешнего API с использованием Redis.



День 6–7: Тестовая задача

Создать FastAPI сервис:

   •   Эндпоинт для загрузки данных в базу.
   •   Эндпоинт для анализа данных с использованием внешнего API.
   •   Документация Swagger для всех маршрутов.
Спринт 11: Полный проект на веб-фреймворках (7 дней)



Цель: Создать полноценный проект на Django или FastAPI.

План:

  1.    День 1–2: Спроектировать приложение (база данных, маршруты, логика).
  2.    День 3–5: Реализовать основные функции (CRUD, API, аутентификация).
  3.    День 6: Тестирование и исправление ошибок.
  4.    День 7: Финальное представление проекта (документация, запуск).
Спринт 12: Завершение и финализация навыков (7 дней)


День 1–3: Рефакторинг и оптимизация

Теория:

   •   Принципы KISS и DRY.
   •   Оптимизация запросов к базе данных.

Практика:

   1. Провести рефакторинг кода из предыдущих спринтов.
   2. Уменьшить количество повторений кода.



День 4–5: Итоговый проект

Создать финальный проект, объединяющий все изученные темы:

   •   Веб-фреймворки.
   •   Асинхронное программирование.
   •   API.
   •   Интеграция с внешними сервисами.



День 6–7: Подготовка и защита проекта

   •   Написать документацию.
   •   Подготовить проект к запуску.
   •   Финальная демонстрация.
