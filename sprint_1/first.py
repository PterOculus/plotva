from copy import copy
# 1 DAY
#Пример задачи для разбора:
a = [1, 2, 3]
b = a
b[0] = 100
print(a)  # Что выведется?


# [100, 2, 3]
# а это массив list, b = a не копирует массив, b ссылается на a. При попытке изменить второй массив мы изменяем первый
# из-за чего и такой вывод, а индексация идет с нуля

# Практика:
#    1. Определить, какие типы данных изменяемые и неизменяемые:
#        x=42 - integer неизменяемый можно только поменять значение переменной
#        y=[1, 2, 3] - list изменяемый
#        z=(1, 2, 3) - tuple неизменяемый
#        w={'a': 1, 'b': 2} - dict изменяемый
#        (Проверить, что произойдет при изменении их значений).
#
#    2. Написать функцию, которая принимает на вход список и кортеж, а возвращает
#       новый список с добавлением элементов кортежа.

def func(arr, arr_2):
    new_arr = copy(arr)
    new_arr.extend(arr_2)
    #append добавит просто кусок кортежа, а extend может работать с итерируемым объектом
    print(f"new {new_arr}\nold {arr}")

arr_l = [1, 2, 3, 4, 5]
arr_t = {9, 19, 29, 39}
func(arr_l, arr_t)

# Домашнее задание:
#    •   Реализовать функцию, которая проверяет, является ли объект неизменяемым.

# можно проверить на каждый тип заложив нужные типы в массив и через if in провести проверку

def types(i):
    mutable_types = ["list", "dict", "set"]
    if type(i).__name__ in mutable_types:
        print(f"1 изменяемый тип {type(i)}")
    else:
        print(f"1 Не изменяемый тип {type(i)}")

#  использую __name__, чтобы получить именно имя, а не <type 'int'>,
# но можно и иначе

def types_is(i):
    if isinstance(i, (list, dict, set)):
        print(f"2 изменяемый тип {type(i)}")
    else:
        print(f"2 Не изменяемый тип {type(i)}")


i = 4
types(i)
types_is(i)

x = list([1, 2, 3])
y = x
print(id(x) == id(y))
x.pop() #  последний
print(id(x) == id(y)) # одинаковый id что говорит что объект тот же но значение разное
a = 10
b = a
print(id(a) == id(b))
print(id(b) == id(10))
b+=1
print(id(a) == id(b)) # false разный id потому что мы поменяли не значение, а создали другой объект
print(id(b) == id(10))
